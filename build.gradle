buildscript {
    repositories {
        mavenCentral()
        maven {
            url 'https://plugins.gradle.org/m2/'
        }
    }
    dependencies {
        classpath 'org.springframework.boot:spring-boot-gradle-plugin:2.3.12.RELEASE'
    }
}

plugins {
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'java'
    id 'application'
    id 'maven-publish'
    id 'signing'
}

ext {
    springBootVersion = '2.5.6'
    versions = [
            conductor      : '3.5.0',
            revSpectator   : '0.122.0',
            revJersey      : '1.19.4',
            revEurekaClient: '1.10.10'
    ]
}

group = 'io.orkes.conductor'

dependencies {
    implementation "com.netflix.conductor:conductor-common:${versions.conductor}"
    implementation "com.netflix.conductor:conductor-client:${versions.conductor}"
    implementation "com.sun.jersey:jersey-client:${versions.revJersey}"

    implementation 'com.fasterxml.jackson.jaxrs:jackson-jaxrs-json-provider'
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'

    implementation 'org.apache.commons:commons-lang3'
    implementation 'org.slf4j:slf4j-api'

    implementation "com.netflix.spectator:spectator-api:${versions.revSpectator}"
    implementation "com.netflix.eureka:eureka-client:${versions.revEurekaClient}"

    testImplementation 'org.junit.jupiter:junit-jupiter-api'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
}

dependencyManagement {
    imports {
        mavenBom("org.springframework.boot:spring-boot-dependencies:2.3.12.RELEASE")
    }
}

repositories {
    mavenCentral()
    mavenLocal() {
        content {
            includeGroup "com.netflix.conductor"
            includeGroup "io.orkes.conductor"
        }
    }
}

java {
    withSourcesJar()
    withJavadocJar()
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            pom {
                name = 'Orkes Conductor Client'
                description = 'Netflix Conductor OSS client wrapper that provides support for Orkes Conductor features'
                url = 'https://github.com/orkes-io/orkes-conductor-client'
                scm {
                    connection = 'scm:git:git://github.com/orkes-io/orkes-conductor-client.git'
                    developerConnection = 'scm:git:ssh://github.com:orkes-io/orkes-conductor-client.git'
                    url = 'https://github.com/orkes-io/orkes-conductor-client'
                }
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        organization = 'Orkes'
                        organizationUrl = 'https://orkes.io'
                        name = 'Orkes Development Team'
                        email = 'developers@orkes.io'
                    }
                }
            }
        }
    }

    repositories {
        maven {
            if (project.hasProperty("mavenCentral")) {
                println "Publishing to Sonatype Repository"
                url = "https://s01.oss.sonatype.org/${project.version.endsWith('-SNAPSHOT') ? "content/repositories/snapshots/" : "service/local/staging/deploy/maven2/"}"
                credentials {
                    username project.properties.username
                    password project.properties.password
                }
            } else {
                println "Publishing to S3 bucket"
                url = "s3://orkes-artifacts-repo/${project.version.endsWith('-SNAPSHOT') ? "snapshots" : "releases"}"
                authentication {
                    awsIm(AwsImAuthentication)
                }
            }
        }
    }
}

test {
    useJUnitPlatform()
}

compileJava {
    sourceCompatibility = 11
    targetCompatibility = 11
}

signing {
    def signingKeyId = findProperty('signingKeyId')
    def signingKey = findProperty('signingKey')
    def signingPassword = findProperty('signingPassword')
    useInMemoryPgpKeys(signingKeyId, signingKey, signingPassword)
    sign publishing.publications
}

