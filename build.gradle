buildscript {
    repositories {
        mavenCentral()
        maven {
            url 'https://plugins.gradle.org/m2/'
        }
    }
    dependencies {
        classpath 'com.diffplug.spotless:spotless-plugin-gradle:6.+'
    }
}

plugins {
    id 'java'
    id 'application'
    id 'maven-publish'
    id 'signing'
    id 'groovy'
    id 'java-library'
    id "com.diffplug.spotless" version "5.0.0"
    id 'jacoco'
}

ext {
    versions = [
            awaitility : '4.2.0',
            commonsLang: '3.12.0',
            conductor  : '3.8.1',
            eureka     : '1.10.17',
            groovy     : '3.0.12',
            jackson    : '2.11.4!!',
            jersey     : '1.19.4',
            junit      : '5.9.0',
            slf4j      : '2.0.0',
            spectator  : '1.3.7',
            spock      : '2.2-groovy-2.5',
            wiremock   : '2.33.2',
            awsSsm  : '1.12.300',
            azureSsm  : '4.2.3',
            azureIdentity: '1.3.7',
    ]
}

group = 'io.orkes.conductor'

dependencies {
    implementation "com.netflix.conductor:conductor-common:${versions.conductor}"
    implementation("com.netflix.conductor:conductor-client:${versions.conductor}") {
        exclude group: "com.netflix.eureka", module: "eureka-client"
    }
    
    api "com.sun.jersey:jersey-client:${versions.jersey}"
    
    implementation "com.fasterxml.jackson.jaxrs:jackson-jaxrs-json-provider:${versions.jackson}"
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:${versions.jackson}"
    
    implementation "org.slf4j:slf4j-api:${versions.slf4j}"
    
    implementation "com.netflix.spectator:spectator-api:${versions.spectator}"
    implementation("com.netflix.eureka:eureka-client:${versions.eureka}") {
        exclude group: "javax.servlet", module: "servlet-api"
    }
    
    implementation 'com.squareup.okhttp:okhttp:2.7.5'
    implementation 'com.squareup.okhttp:logging-interceptor:2.7.5'
    
    implementation 'com.google.code.gson:gson:2.9.0'
    implementation 'io.gsonfire:gson-fire:1.8.5'
    
    implementation 'io.swagger.core.v3:swagger-annotations:2.2.2'
    
    implementation "org.apache.commons:commons-lang3:${versions.commonsLang}"

    implementation 'org.threeten:threetenbp:1.6.1'

    //Integrations
    implementation "com.amazonaws:aws-java-sdk-ssm:${versions.awsSsm}"
    implementation "com.azure:azure-security-keyvault-secrets:${versions.azureSsm}"
    implementation "com.azure:azure-identity:${versions.azureIdentity}"

    // test dependencies
    testImplementation "org.junit.jupiter:junit-jupiter-api:${versions.junit}"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${versions.junit}"
    testImplementation "org.codehaus.groovy:groovy:${versions.groovy}"
    testImplementation "org.codehaus.groovy:groovy-json:${versions.groovy}"
    testImplementation "org.spockframework:spock-core:${versions.spock}"
    testImplementation "org.awaitility:awaitility-groovy:${versions.awaitility}"
    testImplementation("com.github.tomakehurst:wiremock-jre8:${versions.wiremock}") {
        exclude group: 'com.fasterxml.jackson'
    }
}

repositories {
    mavenCentral()
    mavenLocal() {
        content {
            includeGroup "com.netflix.conductor"
            includeGroup "io.orkes.conductor"
        }
    }
}

java {
    withSourcesJar()
    withJavadocJar()
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            pom {
                name = 'Orkes Conductor Client'
                description = 'Netflix Conductor client that provides support for Orkes Conductor features'
                url = 'https://github.com/orkes-io/orkes-conductor-client'
                scm {
                    connection = 'scm:git:git://github.com/orkes-io/orkes-conductor-client.git'
                    developerConnection = 'scm:git:ssh://github.com:orkes-io/orkes-conductor-client.git'
                    url = 'https://github.com/orkes-io/orkes-conductor-client'
                }
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        organization = 'Orkes'
                        organizationUrl = 'https://orkes.io'
                        name = 'Orkes Development Team'
                        email = 'developers@orkes.io'
                    }
                }
            }
        }
    }

    repositories {
        maven {
            if (project.hasProperty("mavenCentral")) {
                println "Publishing to Sonatype Repository"
                url = "https://s01.oss.sonatype.org/${project.version.endsWith('-SNAPSHOT') ? "content/repositories/snapshots/" : "service/local/staging/deploy/maven2/"}"
                credentials {
                    username project.properties.username
                    password project.properties.password
                }
            } else {
                url = "s3://orkes-artifacts-repo/${project.version.endsWith('-SNAPSHOT') ? "snapshots" : "releases"}"
                authentication {
                    awsIm(AwsImAuthentication)
                }
            }
        }
    }
}

test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport // report is always generated after tests run
}

jacocoTestReport {
    dependsOn test // tests are required to run before generating the report
}

compileJava {
    sourceCompatibility = 11
    targetCompatibility = 11
}

spotless {
    java {
        googleJavaFormat().aosp()
        removeUnusedImports()
        importOrder('java', 'javax', 'org', 'com.netflix', 'io.orkes','', '\\#com.netflix', '\\#')
        licenseHeaderFile("$rootDir/licenseheader.txt")
    }
}
build.dependsOn(spotlessApply)

signing {
    def signingKeyId = findProperty('signingKeyId')
    def signingKey = findProperty('signingKey')
    def signingPassword = findProperty('signingPassword')
    if (signingKeyId && signingKey && signingPassword) {
        useInMemoryPgpKeys(signingKeyId, signingKey, signingPassword)
    }

    sign publishing.publications
}
sourceSets.main.java.srcDirs += ['example/java', 'example/resources']
