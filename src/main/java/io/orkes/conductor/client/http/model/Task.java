/*
 * Orkes Conductor API Server
 * Orkes Conductor API Server
 *
 * OpenAPI spec version: v2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.orkes.conductor.client.http.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.orkes.conductor.client.http.model.TaskDef;
import io.orkes.conductor.client.http.model.WorkflowTask;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
/**
 * Task
 */


public class Task {
  @SerializedName("callbackAfterSeconds")
  private Long callbackAfterSeconds = null;

  @SerializedName("callbackFromWorker")
  private Boolean callbackFromWorker = null;

  @SerializedName("correlationId")
  private String correlationId = null;

  @SerializedName("domain")
  private String domain = null;

  @SerializedName("endTime")
  private Long endTime = null;

  @SerializedName("executed")
  private Boolean executed = null;

  @SerializedName("executionNameSpace")
  private String executionNameSpace = null;

  @SerializedName("externalInputPayloadStoragePath")
  private String externalInputPayloadStoragePath = null;

  @SerializedName("externalOutputPayloadStoragePath")
  private String externalOutputPayloadStoragePath = null;

  @SerializedName("inputData")
  private Map<String, Object> inputData = null;

  @SerializedName("isolationGroupId")
  private String isolationGroupId = null;

  @SerializedName("iteration")
  private Integer iteration = null;

  @SerializedName("loopOverTask")
  private Boolean loopOverTask = null;

  @SerializedName("outputData")
  private Map<String, Object> outputData = null;

  @SerializedName("pollCount")
  private Integer pollCount = null;

  @SerializedName("queueWaitTime")
  private Long queueWaitTime = null;

  @SerializedName("rateLimitFrequencyInSeconds")
  private Integer rateLimitFrequencyInSeconds = null;

  @SerializedName("rateLimitPerFrequency")
  private Integer rateLimitPerFrequency = null;

  @SerializedName("reasonForIncompletion")
  private String reasonForIncompletion = null;

  @SerializedName("referenceTaskName")
  private String referenceTaskName = null;

  @SerializedName("responseTimeoutSeconds")
  private Long responseTimeoutSeconds = null;

  @SerializedName("retried")
  private Boolean retried = null;

  @SerializedName("retriedTaskId")
  private String retriedTaskId = null;

  @SerializedName("retryCount")
  private Integer retryCount = null;

  @SerializedName("scheduledTime")
  private Long scheduledTime = null;

  @SerializedName("seq")
  private Integer seq = null;

  @SerializedName("startDelayInSeconds")
  private Integer startDelayInSeconds = null;

  @SerializedName("startTime")
  private Long startTime = null;

  /**
   * Gets or Sets status
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    IN_PROGRESS("IN_PROGRESS"),
    CANCELED("CANCELED"),
    FAILED("FAILED"),
    FAILED_WITH_TERMINAL_ERROR("FAILED_WITH_TERMINAL_ERROR"),
    COMPLETED("COMPLETED"),
    COMPLETED_WITH_ERRORS("COMPLETED_WITH_ERRORS"),
    SCHEDULED("SCHEDULED"),
    TIMED_OUT("TIMED_OUT"),
    SKIPPED("SKIPPED");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static StatusEnum fromValue(String input) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return StatusEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("status")
  private StatusEnum status = null;

  @SerializedName("subWorkflowId")
  private String subWorkflowId = null;

  @SerializedName("subworkflowChanged")
  private Boolean subworkflowChanged = null;

  @SerializedName("taskDefName")
  private String taskDefName = null;

  @SerializedName("taskDefinition")
  private TaskDef taskDefinition = null;

  @SerializedName("taskId")
  private String taskId = null;

  @SerializedName("taskType")
  private String taskType = null;

  @SerializedName("updateTime")
  private Long updateTime = null;

  @SerializedName("workerId")
  private String workerId = null;

  @SerializedName("workflowInstanceId")
  private String workflowInstanceId = null;

  @SerializedName("workflowPriority")
  private Integer workflowPriority = null;

  @SerializedName("workflowTask")
  private WorkflowTask workflowTask = null;

  @SerializedName("workflowType")
  private String workflowType = null;

  public Task callbackAfterSeconds(Long callbackAfterSeconds) {
    this.callbackAfterSeconds = callbackAfterSeconds;
    return this;
  }

   /**
   * Get callbackAfterSeconds
   * @return callbackAfterSeconds
  **/
  @Schema(description = "")
  public Long getCallbackAfterSeconds() {
    return callbackAfterSeconds;
  }

  public void setCallbackAfterSeconds(Long callbackAfterSeconds) {
    this.callbackAfterSeconds = callbackAfterSeconds;
  }

  public Task callbackFromWorker(Boolean callbackFromWorker) {
    this.callbackFromWorker = callbackFromWorker;
    return this;
  }

   /**
   * Get callbackFromWorker
   * @return callbackFromWorker
  **/
  @Schema(description = "")
  public Boolean isCallbackFromWorker() {
    return callbackFromWorker;
  }

  public void setCallbackFromWorker(Boolean callbackFromWorker) {
    this.callbackFromWorker = callbackFromWorker;
  }

  public Task correlationId(String correlationId) {
    this.correlationId = correlationId;
    return this;
  }

   /**
   * Get correlationId
   * @return correlationId
  **/
  @Schema(description = "")
  public String getCorrelationId() {
    return correlationId;
  }

  public void setCorrelationId(String correlationId) {
    this.correlationId = correlationId;
  }

  public Task domain(String domain) {
    this.domain = domain;
    return this;
  }

   /**
   * Get domain
   * @return domain
  **/
  @Schema(description = "")
  public String getDomain() {
    return domain;
  }

  public void setDomain(String domain) {
    this.domain = domain;
  }

  public Task endTime(Long endTime) {
    this.endTime = endTime;
    return this;
  }

   /**
   * Get endTime
   * @return endTime
  **/
  @Schema(description = "")
  public Long getEndTime() {
    return endTime;
  }

  public void setEndTime(Long endTime) {
    this.endTime = endTime;
  }

  public Task executed(Boolean executed) {
    this.executed = executed;
    return this;
  }

   /**
   * Get executed
   * @return executed
  **/
  @Schema(description = "")
  public Boolean isExecuted() {
    return executed;
  }

  public void setExecuted(Boolean executed) {
    this.executed = executed;
  }

  public Task executionNameSpace(String executionNameSpace) {
    this.executionNameSpace = executionNameSpace;
    return this;
  }

   /**
   * Get executionNameSpace
   * @return executionNameSpace
  **/
  @Schema(description = "")
  public String getExecutionNameSpace() {
    return executionNameSpace;
  }

  public void setExecutionNameSpace(String executionNameSpace) {
    this.executionNameSpace = executionNameSpace;
  }

  public Task externalInputPayloadStoragePath(String externalInputPayloadStoragePath) {
    this.externalInputPayloadStoragePath = externalInputPayloadStoragePath;
    return this;
  }

   /**
   * Get externalInputPayloadStoragePath
   * @return externalInputPayloadStoragePath
  **/
  @Schema(description = "")
  public String getExternalInputPayloadStoragePath() {
    return externalInputPayloadStoragePath;
  }

  public void setExternalInputPayloadStoragePath(String externalInputPayloadStoragePath) {
    this.externalInputPayloadStoragePath = externalInputPayloadStoragePath;
  }

  public Task externalOutputPayloadStoragePath(String externalOutputPayloadStoragePath) {
    this.externalOutputPayloadStoragePath = externalOutputPayloadStoragePath;
    return this;
  }

   /**
   * Get externalOutputPayloadStoragePath
   * @return externalOutputPayloadStoragePath
  **/
  @Schema(description = "")
  public String getExternalOutputPayloadStoragePath() {
    return externalOutputPayloadStoragePath;
  }

  public void setExternalOutputPayloadStoragePath(String externalOutputPayloadStoragePath) {
    this.externalOutputPayloadStoragePath = externalOutputPayloadStoragePath;
  }

  public Task inputData(Map<String, Object> inputData) {
    this.inputData = inputData;
    return this;
  }

  public Task putInputDataItem(String key, Object inputDataItem) {
    if (this.inputData == null) {
      this.inputData = new HashMap<String, Object>();
    }
    this.inputData.put(key, inputDataItem);
    return this;
  }

   /**
   * Get inputData
   * @return inputData
  **/
  @Schema(description = "")
  public Map<String, Object> getInputData() {
    return inputData;
  }

  public void setInputData(Map<String, Object> inputData) {
    this.inputData = inputData;
  }

  public Task isolationGroupId(String isolationGroupId) {
    this.isolationGroupId = isolationGroupId;
    return this;
  }

   /**
   * Get isolationGroupId
   * @return isolationGroupId
  **/
  @Schema(description = "")
  public String getIsolationGroupId() {
    return isolationGroupId;
  }

  public void setIsolationGroupId(String isolationGroupId) {
    this.isolationGroupId = isolationGroupId;
  }

  public Task iteration(Integer iteration) {
    this.iteration = iteration;
    return this;
  }

   /**
   * Get iteration
   * @return iteration
  **/
  @Schema(description = "")
  public Integer getIteration() {
    return iteration;
  }

  public void setIteration(Integer iteration) {
    this.iteration = iteration;
  }

  public Task loopOverTask(Boolean loopOverTask) {
    this.loopOverTask = loopOverTask;
    return this;
  }

   /**
   * Get loopOverTask
   * @return loopOverTask
  **/
  @Schema(description = "")
  public Boolean isLoopOverTask() {
    return loopOverTask;
  }

  public void setLoopOverTask(Boolean loopOverTask) {
    this.loopOverTask = loopOverTask;
  }

  public Task outputData(Map<String, Object> outputData) {
    this.outputData = outputData;
    return this;
  }

  public Task putOutputDataItem(String key, Object outputDataItem) {
    if (this.outputData == null) {
      this.outputData = new HashMap<String, Object>();
    }
    this.outputData.put(key, outputDataItem);
    return this;
  }

   /**
   * Get outputData
   * @return outputData
  **/
  @Schema(description = "")
  public Map<String, Object> getOutputData() {
    return outputData;
  }

  public void setOutputData(Map<String, Object> outputData) {
    this.outputData = outputData;
  }

  public Task pollCount(Integer pollCount) {
    this.pollCount = pollCount;
    return this;
  }

   /**
   * Get pollCount
   * @return pollCount
  **/
  @Schema(description = "")
  public Integer getPollCount() {
    return pollCount;
  }

  public void setPollCount(Integer pollCount) {
    this.pollCount = pollCount;
  }

  public Task queueWaitTime(Long queueWaitTime) {
    this.queueWaitTime = queueWaitTime;
    return this;
  }

   /**
   * Get queueWaitTime
   * @return queueWaitTime
  **/
  @Schema(description = "")
  public Long getQueueWaitTime() {
    return queueWaitTime;
  }

  public void setQueueWaitTime(Long queueWaitTime) {
    this.queueWaitTime = queueWaitTime;
  }

  public Task rateLimitFrequencyInSeconds(Integer rateLimitFrequencyInSeconds) {
    this.rateLimitFrequencyInSeconds = rateLimitFrequencyInSeconds;
    return this;
  }

   /**
   * Get rateLimitFrequencyInSeconds
   * @return rateLimitFrequencyInSeconds
  **/
  @Schema(description = "")
  public Integer getRateLimitFrequencyInSeconds() {
    return rateLimitFrequencyInSeconds;
  }

  public void setRateLimitFrequencyInSeconds(Integer rateLimitFrequencyInSeconds) {
    this.rateLimitFrequencyInSeconds = rateLimitFrequencyInSeconds;
  }

  public Task rateLimitPerFrequency(Integer rateLimitPerFrequency) {
    this.rateLimitPerFrequency = rateLimitPerFrequency;
    return this;
  }

   /**
   * Get rateLimitPerFrequency
   * @return rateLimitPerFrequency
  **/
  @Schema(description = "")
  public Integer getRateLimitPerFrequency() {
    return rateLimitPerFrequency;
  }

  public void setRateLimitPerFrequency(Integer rateLimitPerFrequency) {
    this.rateLimitPerFrequency = rateLimitPerFrequency;
  }

  public Task reasonForIncompletion(String reasonForIncompletion) {
    this.reasonForIncompletion = reasonForIncompletion;
    return this;
  }

   /**
   * Get reasonForIncompletion
   * @return reasonForIncompletion
  **/
  @Schema(description = "")
  public String getReasonForIncompletion() {
    return reasonForIncompletion;
  }

  public void setReasonForIncompletion(String reasonForIncompletion) {
    this.reasonForIncompletion = reasonForIncompletion;
  }

  public Task referenceTaskName(String referenceTaskName) {
    this.referenceTaskName = referenceTaskName;
    return this;
  }

   /**
   * Get referenceTaskName
   * @return referenceTaskName
  **/
  @Schema(description = "")
  public String getReferenceTaskName() {
    return referenceTaskName;
  }

  public void setReferenceTaskName(String referenceTaskName) {
    this.referenceTaskName = referenceTaskName;
  }

  public Task responseTimeoutSeconds(Long responseTimeoutSeconds) {
    this.responseTimeoutSeconds = responseTimeoutSeconds;
    return this;
  }

   /**
   * Get responseTimeoutSeconds
   * @return responseTimeoutSeconds
  **/
  @Schema(description = "")
  public Long getResponseTimeoutSeconds() {
    return responseTimeoutSeconds;
  }

  public void setResponseTimeoutSeconds(Long responseTimeoutSeconds) {
    this.responseTimeoutSeconds = responseTimeoutSeconds;
  }

  public Task retried(Boolean retried) {
    this.retried = retried;
    return this;
  }

   /**
   * Get retried
   * @return retried
  **/
  @Schema(description = "")
  public Boolean isRetried() {
    return retried;
  }

  public void setRetried(Boolean retried) {
    this.retried = retried;
  }

  public Task retriedTaskId(String retriedTaskId) {
    this.retriedTaskId = retriedTaskId;
    return this;
  }

   /**
   * Get retriedTaskId
   * @return retriedTaskId
  **/
  @Schema(description = "")
  public String getRetriedTaskId() {
    return retriedTaskId;
  }

  public void setRetriedTaskId(String retriedTaskId) {
    this.retriedTaskId = retriedTaskId;
  }

  public Task retryCount(Integer retryCount) {
    this.retryCount = retryCount;
    return this;
  }

   /**
   * Get retryCount
   * @return retryCount
  **/
  @Schema(description = "")
  public Integer getRetryCount() {
    return retryCount;
  }

  public void setRetryCount(Integer retryCount) {
    this.retryCount = retryCount;
  }

  public Task scheduledTime(Long scheduledTime) {
    this.scheduledTime = scheduledTime;
    return this;
  }

   /**
   * Get scheduledTime
   * @return scheduledTime
  **/
  @Schema(description = "")
  public Long getScheduledTime() {
    return scheduledTime;
  }

  public void setScheduledTime(Long scheduledTime) {
    this.scheduledTime = scheduledTime;
  }

  public Task seq(Integer seq) {
    this.seq = seq;
    return this;
  }

   /**
   * Get seq
   * @return seq
  **/
  @Schema(description = "")
  public Integer getSeq() {
    return seq;
  }

  public void setSeq(Integer seq) {
    this.seq = seq;
  }

  public Task startDelayInSeconds(Integer startDelayInSeconds) {
    this.startDelayInSeconds = startDelayInSeconds;
    return this;
  }

   /**
   * Get startDelayInSeconds
   * @return startDelayInSeconds
  **/
  @Schema(description = "")
  public Integer getStartDelayInSeconds() {
    return startDelayInSeconds;
  }

  public void setStartDelayInSeconds(Integer startDelayInSeconds) {
    this.startDelayInSeconds = startDelayInSeconds;
  }

  public Task startTime(Long startTime) {
    this.startTime = startTime;
    return this;
  }

   /**
   * Get startTime
   * @return startTime
  **/
  @Schema(description = "")
  public Long getStartTime() {
    return startTime;
  }

  public void setStartTime(Long startTime) {
    this.startTime = startTime;
  }

  public Task status(StatusEnum status) {
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @Schema(description = "")
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }

  public Task subWorkflowId(String subWorkflowId) {
    this.subWorkflowId = subWorkflowId;
    return this;
  }

   /**
   * Get subWorkflowId
   * @return subWorkflowId
  **/
  @Schema(description = "")
  public String getSubWorkflowId() {
    return subWorkflowId;
  }

  public void setSubWorkflowId(String subWorkflowId) {
    this.subWorkflowId = subWorkflowId;
  }

  public Task subworkflowChanged(Boolean subworkflowChanged) {
    this.subworkflowChanged = subworkflowChanged;
    return this;
  }

   /**
   * Get subworkflowChanged
   * @return subworkflowChanged
  **/
  @Schema(description = "")
  public Boolean isSubworkflowChanged() {
    return subworkflowChanged;
  }

  public void setSubworkflowChanged(Boolean subworkflowChanged) {
    this.subworkflowChanged = subworkflowChanged;
  }

  public Task taskDefName(String taskDefName) {
    this.taskDefName = taskDefName;
    return this;
  }

   /**
   * Get taskDefName
   * @return taskDefName
  **/
  @Schema(description = "")
  public String getTaskDefName() {
    return taskDefName;
  }

  public void setTaskDefName(String taskDefName) {
    this.taskDefName = taskDefName;
  }

  public Task taskDefinition(TaskDef taskDefinition) {
    this.taskDefinition = taskDefinition;
    return this;
  }

   /**
   * Get taskDefinition
   * @return taskDefinition
  **/
  @Schema(description = "")
  public TaskDef getTaskDefinition() {
    return taskDefinition;
  }

  public void setTaskDefinition(TaskDef taskDefinition) {
    this.taskDefinition = taskDefinition;
  }

  public Task taskId(String taskId) {
    this.taskId = taskId;
    return this;
  }

   /**
   * Get taskId
   * @return taskId
  **/
  @Schema(description = "")
  public String getTaskId() {
    return taskId;
  }

  public void setTaskId(String taskId) {
    this.taskId = taskId;
  }

  public Task taskType(String taskType) {
    this.taskType = taskType;
    return this;
  }

   /**
   * Get taskType
   * @return taskType
  **/
  @Schema(description = "")
  public String getTaskType() {
    return taskType;
  }

  public void setTaskType(String taskType) {
    this.taskType = taskType;
  }

  public Task updateTime(Long updateTime) {
    this.updateTime = updateTime;
    return this;
  }

   /**
   * Get updateTime
   * @return updateTime
  **/
  @Schema(description = "")
  public Long getUpdateTime() {
    return updateTime;
  }

  public void setUpdateTime(Long updateTime) {
    this.updateTime = updateTime;
  }

  public Task workerId(String workerId) {
    this.workerId = workerId;
    return this;
  }

   /**
   * Get workerId
   * @return workerId
  **/
  @Schema(description = "")
  public String getWorkerId() {
    return workerId;
  }

  public void setWorkerId(String workerId) {
    this.workerId = workerId;
  }

  public Task workflowInstanceId(String workflowInstanceId) {
    this.workflowInstanceId = workflowInstanceId;
    return this;
  }

   /**
   * Get workflowInstanceId
   * @return workflowInstanceId
  **/
  @Schema(description = "")
  public String getWorkflowInstanceId() {
    return workflowInstanceId;
  }

  public void setWorkflowInstanceId(String workflowInstanceId) {
    this.workflowInstanceId = workflowInstanceId;
  }

  public Task workflowPriority(Integer workflowPriority) {
    this.workflowPriority = workflowPriority;
    return this;
  }

   /**
   * Get workflowPriority
   * @return workflowPriority
  **/
  @Schema(description = "")
  public Integer getWorkflowPriority() {
    return workflowPriority;
  }

  public void setWorkflowPriority(Integer workflowPriority) {
    this.workflowPriority = workflowPriority;
  }

  public Task workflowTask(WorkflowTask workflowTask) {
    this.workflowTask = workflowTask;
    return this;
  }

   /**
   * Get workflowTask
   * @return workflowTask
  **/
  @Schema(description = "")
  public WorkflowTask getWorkflowTask() {
    return workflowTask;
  }

  public void setWorkflowTask(WorkflowTask workflowTask) {
    this.workflowTask = workflowTask;
  }

  public Task workflowType(String workflowType) {
    this.workflowType = workflowType;
    return this;
  }

   /**
   * Get workflowType
   * @return workflowType
  **/
  @Schema(description = "")
  public String getWorkflowType() {
    return workflowType;
  }

  public void setWorkflowType(String workflowType) {
    this.workflowType = workflowType;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Task task = (Task) o;
    return Objects.equals(this.callbackAfterSeconds, task.callbackAfterSeconds) &&
        Objects.equals(this.callbackFromWorker, task.callbackFromWorker) &&
        Objects.equals(this.correlationId, task.correlationId) &&
        Objects.equals(this.domain, task.domain) &&
        Objects.equals(this.endTime, task.endTime) &&
        Objects.equals(this.executed, task.executed) &&
        Objects.equals(this.executionNameSpace, task.executionNameSpace) &&
        Objects.equals(this.externalInputPayloadStoragePath, task.externalInputPayloadStoragePath) &&
        Objects.equals(this.externalOutputPayloadStoragePath, task.externalOutputPayloadStoragePath) &&
        Objects.equals(this.inputData, task.inputData) &&
        Objects.equals(this.isolationGroupId, task.isolationGroupId) &&
        Objects.equals(this.iteration, task.iteration) &&
        Objects.equals(this.loopOverTask, task.loopOverTask) &&
        Objects.equals(this.outputData, task.outputData) &&
        Objects.equals(this.pollCount, task.pollCount) &&
        Objects.equals(this.queueWaitTime, task.queueWaitTime) &&
        Objects.equals(this.rateLimitFrequencyInSeconds, task.rateLimitFrequencyInSeconds) &&
        Objects.equals(this.rateLimitPerFrequency, task.rateLimitPerFrequency) &&
        Objects.equals(this.reasonForIncompletion, task.reasonForIncompletion) &&
        Objects.equals(this.referenceTaskName, task.referenceTaskName) &&
        Objects.equals(this.responseTimeoutSeconds, task.responseTimeoutSeconds) &&
        Objects.equals(this.retried, task.retried) &&
        Objects.equals(this.retriedTaskId, task.retriedTaskId) &&
        Objects.equals(this.retryCount, task.retryCount) &&
        Objects.equals(this.scheduledTime, task.scheduledTime) &&
        Objects.equals(this.seq, task.seq) &&
        Objects.equals(this.startDelayInSeconds, task.startDelayInSeconds) &&
        Objects.equals(this.startTime, task.startTime) &&
        Objects.equals(this.status, task.status) &&
        Objects.equals(this.subWorkflowId, task.subWorkflowId) &&
        Objects.equals(this.subworkflowChanged, task.subworkflowChanged) &&
        Objects.equals(this.taskDefName, task.taskDefName) &&
        Objects.equals(this.taskDefinition, task.taskDefinition) &&
        Objects.equals(this.taskId, task.taskId) &&
        Objects.equals(this.taskType, task.taskType) &&
        Objects.equals(this.updateTime, task.updateTime) &&
        Objects.equals(this.workerId, task.workerId) &&
        Objects.equals(this.workflowInstanceId, task.workflowInstanceId) &&
        Objects.equals(this.workflowPriority, task.workflowPriority) &&
        Objects.equals(this.workflowTask, task.workflowTask) &&
        Objects.equals(this.workflowType, task.workflowType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(callbackAfterSeconds, callbackFromWorker, correlationId, domain, endTime, executed, executionNameSpace, externalInputPayloadStoragePath, externalOutputPayloadStoragePath, inputData, isolationGroupId, iteration, loopOverTask, outputData, pollCount, queueWaitTime, rateLimitFrequencyInSeconds, rateLimitPerFrequency, reasonForIncompletion, referenceTaskName, responseTimeoutSeconds, retried, retriedTaskId, retryCount, scheduledTime, seq, startDelayInSeconds, startTime, status, subWorkflowId, subworkflowChanged, taskDefName, taskDefinition, taskId, taskType, updateTime, workerId, workflowInstanceId, workflowPriority, workflowTask, workflowType);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Task {\n");
    
    sb.append("    callbackAfterSeconds: ").append(toIndentedString(callbackAfterSeconds)).append("\n");
    sb.append("    callbackFromWorker: ").append(toIndentedString(callbackFromWorker)).append("\n");
    sb.append("    correlationId: ").append(toIndentedString(correlationId)).append("\n");
    sb.append("    domain: ").append(toIndentedString(domain)).append("\n");
    sb.append("    endTime: ").append(toIndentedString(endTime)).append("\n");
    sb.append("    executed: ").append(toIndentedString(executed)).append("\n");
    sb.append("    executionNameSpace: ").append(toIndentedString(executionNameSpace)).append("\n");
    sb.append("    externalInputPayloadStoragePath: ").append(toIndentedString(externalInputPayloadStoragePath)).append("\n");
    sb.append("    externalOutputPayloadStoragePath: ").append(toIndentedString(externalOutputPayloadStoragePath)).append("\n");
    sb.append("    inputData: ").append(toIndentedString(inputData)).append("\n");
    sb.append("    isolationGroupId: ").append(toIndentedString(isolationGroupId)).append("\n");
    sb.append("    iteration: ").append(toIndentedString(iteration)).append("\n");
    sb.append("    loopOverTask: ").append(toIndentedString(loopOverTask)).append("\n");
    sb.append("    outputData: ").append(toIndentedString(outputData)).append("\n");
    sb.append("    pollCount: ").append(toIndentedString(pollCount)).append("\n");
    sb.append("    queueWaitTime: ").append(toIndentedString(queueWaitTime)).append("\n");
    sb.append("    rateLimitFrequencyInSeconds: ").append(toIndentedString(rateLimitFrequencyInSeconds)).append("\n");
    sb.append("    rateLimitPerFrequency: ").append(toIndentedString(rateLimitPerFrequency)).append("\n");
    sb.append("    reasonForIncompletion: ").append(toIndentedString(reasonForIncompletion)).append("\n");
    sb.append("    referenceTaskName: ").append(toIndentedString(referenceTaskName)).append("\n");
    sb.append("    responseTimeoutSeconds: ").append(toIndentedString(responseTimeoutSeconds)).append("\n");
    sb.append("    retried: ").append(toIndentedString(retried)).append("\n");
    sb.append("    retriedTaskId: ").append(toIndentedString(retriedTaskId)).append("\n");
    sb.append("    retryCount: ").append(toIndentedString(retryCount)).append("\n");
    sb.append("    scheduledTime: ").append(toIndentedString(scheduledTime)).append("\n");
    sb.append("    seq: ").append(toIndentedString(seq)).append("\n");
    sb.append("    startDelayInSeconds: ").append(toIndentedString(startDelayInSeconds)).append("\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    subWorkflowId: ").append(toIndentedString(subWorkflowId)).append("\n");
    sb.append("    subworkflowChanged: ").append(toIndentedString(subworkflowChanged)).append("\n");
    sb.append("    taskDefName: ").append(toIndentedString(taskDefName)).append("\n");
    sb.append("    taskDefinition: ").append(toIndentedString(taskDefinition)).append("\n");
    sb.append("    taskId: ").append(toIndentedString(taskId)).append("\n");
    sb.append("    taskType: ").append(toIndentedString(taskType)).append("\n");
    sb.append("    updateTime: ").append(toIndentedString(updateTime)).append("\n");
    sb.append("    workerId: ").append(toIndentedString(workerId)).append("\n");
    sb.append("    workflowInstanceId: ").append(toIndentedString(workflowInstanceId)).append("\n");
    sb.append("    workflowPriority: ").append(toIndentedString(workflowPriority)).append("\n");
    sb.append("    workflowTask: ").append(toIndentedString(workflowTask)).append("\n");
    sb.append("    workflowType: ").append(toIndentedString(workflowType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
